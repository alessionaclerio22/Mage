// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module mage_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 7
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output mage_reg_pkg::mage_reg2hw_t reg2hw,  // Write


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import mage_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] cfg_pe_00_qs;
  logic [31:0] cfg_pe_00_wd;
  logic cfg_pe_00_we;
  logic [31:0] cfg_pe_01_qs;
  logic [31:0] cfg_pe_01_wd;
  logic cfg_pe_01_we;
  logic [31:0] cfg_pe_02_qs;
  logic [31:0] cfg_pe_02_wd;
  logic cfg_pe_02_we;
  logic [31:0] cfg_pe_03_qs;
  logic [31:0] cfg_pe_03_wd;
  logic cfg_pe_03_we;
  logic [31:0] cfg_pe_10_qs;
  logic [31:0] cfg_pe_10_wd;
  logic cfg_pe_10_we;
  logic [31:0] cfg_pe_11_qs;
  logic [31:0] cfg_pe_11_wd;
  logic cfg_pe_11_we;
  logic [31:0] cfg_pe_12_qs;
  logic [31:0] cfg_pe_12_wd;
  logic cfg_pe_12_we;
  logic [31:0] cfg_pe_13_qs;
  logic [31:0] cfg_pe_13_wd;
  logic cfg_pe_13_we;
  logic [31:0] cfg_pe_20_qs;
  logic [31:0] cfg_pe_20_wd;
  logic cfg_pe_20_we;
  logic [31:0] cfg_pe_21_qs;
  logic [31:0] cfg_pe_21_wd;
  logic cfg_pe_21_we;
  logic [31:0] cfg_pe_22_qs;
  logic [31:0] cfg_pe_22_wd;
  logic cfg_pe_22_we;
  logic [31:0] cfg_pe_23_qs;
  logic [31:0] cfg_pe_23_wd;
  logic cfg_pe_23_we;
  logic [31:0] cfg_pe_30_qs;
  logic [31:0] cfg_pe_30_wd;
  logic cfg_pe_30_we;
  logic [31:0] cfg_pe_31_qs;
  logic [31:0] cfg_pe_31_wd;
  logic cfg_pe_31_we;
  logic [31:0] cfg_pe_32_qs;
  logic [31:0] cfg_pe_32_wd;
  logic cfg_pe_32_we;
  logic [31:0] cfg_pe_33_qs;
  logic [31:0] cfg_pe_33_wd;
  logic cfg_pe_33_we;
  logic [7:0] pea_constants_0_c0_0_qs;
  logic [7:0] pea_constants_0_c0_0_wd;
  logic pea_constants_0_c0_0_we;
  logic [7:0] pea_constants_0_c1_0_qs;
  logic [7:0] pea_constants_0_c1_0_wd;
  logic pea_constants_0_c1_0_we;
  logic [7:0] pea_constants_0_c2_0_qs;
  logic [7:0] pea_constants_0_c2_0_wd;
  logic pea_constants_0_c2_0_we;
  logic [7:0] pea_constants_0_c3_0_qs;
  logic [7:0] pea_constants_0_c3_0_wd;
  logic pea_constants_0_c3_0_we;
  logic [7:0] pea_constants_1_c0_1_qs;
  logic [7:0] pea_constants_1_c0_1_wd;
  logic pea_constants_1_c0_1_we;
  logic [7:0] pea_constants_1_c1_1_qs;
  logic [7:0] pea_constants_1_c1_1_wd;
  logic pea_constants_1_c1_1_we;
  logic [7:0] pea_constants_1_c2_1_qs;
  logic [7:0] pea_constants_1_c2_1_wd;
  logic pea_constants_1_c2_1_we;
  logic [7:0] pea_constants_1_c3_1_qs;
  logic [7:0] pea_constants_1_c3_1_wd;
  logic pea_constants_1_c3_1_we;
  logic [7:0] pea_constants_2_c0_2_qs;
  logic [7:0] pea_constants_2_c0_2_wd;
  logic pea_constants_2_c0_2_we;
  logic [7:0] pea_constants_2_c1_2_qs;
  logic [7:0] pea_constants_2_c1_2_wd;
  logic pea_constants_2_c1_2_we;
  logic [7:0] pea_constants_2_c2_2_qs;
  logic [7:0] pea_constants_2_c2_2_wd;
  logic pea_constants_2_c2_2_we;
  logic [7:0] pea_constants_2_c3_2_qs;
  logic [7:0] pea_constants_2_c3_2_wd;
  logic pea_constants_2_c3_2_we;
  logic [7:0] pea_constants_3_c0_3_qs;
  logic [7:0] pea_constants_3_c0_3_wd;
  logic pea_constants_3_c0_3_we;
  logic [7:0] pea_constants_3_c1_3_qs;
  logic [7:0] pea_constants_3_c1_3_wd;
  logic pea_constants_3_c1_3_we;
  logic [7:0] pea_constants_3_c2_3_qs;
  logic [7:0] pea_constants_3_c2_3_wd;
  logic pea_constants_3_c2_3_we;
  logic [7:0] pea_constants_3_c3_3_qs;
  logic [7:0] pea_constants_3_c3_3_wd;
  logic pea_constants_3_c3_3_we;
  logic [3:0] stream_dma_cfg_qs;
  logic [3:0] stream_dma_cfg_wd;
  logic stream_dma_cfg_we;
  logic [7:0] sel_out_col_pea_sel_col_0_0_qs;
  logic [7:0] sel_out_col_pea_sel_col_0_0_wd;
  logic sel_out_col_pea_sel_col_0_0_we;
  logic [7:0] sel_out_col_pea_sel_col_1_0_qs;
  logic [7:0] sel_out_col_pea_sel_col_1_0_wd;
  logic sel_out_col_pea_sel_col_1_0_we;
  logic [7:0] sel_out_col_pea_sel_col_2_0_qs;
  logic [7:0] sel_out_col_pea_sel_col_2_0_wd;
  logic sel_out_col_pea_sel_col_2_0_we;
  logic [7:0] sel_out_col_pea_sel_col_3_0_qs;
  logic [7:0] sel_out_col_pea_sel_col_3_0_wd;
  logic sel_out_col_pea_sel_col_3_0_we;
  logic [7:0] acc_value_0_pe_0_0_qs;
  logic [7:0] acc_value_0_pe_0_0_wd;
  logic acc_value_0_pe_0_0_we;
  logic [7:0] acc_value_0_pe_1_0_qs;
  logic [7:0] acc_value_0_pe_1_0_wd;
  logic acc_value_0_pe_1_0_we;
  logic [7:0] acc_value_0_pe_2_0_qs;
  logic [7:0] acc_value_0_pe_2_0_wd;
  logic acc_value_0_pe_2_0_we;
  logic [7:0] acc_value_0_pe_3_0_qs;
  logic [7:0] acc_value_0_pe_3_0_wd;
  logic acc_value_0_pe_3_0_we;
  logic [7:0] acc_value_1_pe_0_1_qs;
  logic [7:0] acc_value_1_pe_0_1_wd;
  logic acc_value_1_pe_0_1_we;
  logic [7:0] acc_value_1_pe_1_1_qs;
  logic [7:0] acc_value_1_pe_1_1_wd;
  logic acc_value_1_pe_1_1_we;
  logic [7:0] acc_value_1_pe_2_1_qs;
  logic [7:0] acc_value_1_pe_2_1_wd;
  logic acc_value_1_pe_2_1_we;
  logic [7:0] acc_value_1_pe_3_1_qs;
  logic [7:0] acc_value_1_pe_3_1_wd;
  logic acc_value_1_pe_3_1_we;
  logic [7:0] acc_value_2_pe_0_2_qs;
  logic [7:0] acc_value_2_pe_0_2_wd;
  logic acc_value_2_pe_0_2_we;
  logic [7:0] acc_value_2_pe_1_2_qs;
  logic [7:0] acc_value_2_pe_1_2_wd;
  logic acc_value_2_pe_1_2_we;
  logic [7:0] acc_value_2_pe_2_2_qs;
  logic [7:0] acc_value_2_pe_2_2_wd;
  logic acc_value_2_pe_2_2_we;
  logic [7:0] acc_value_2_pe_3_2_qs;
  logic [7:0] acc_value_2_pe_3_2_wd;
  logic acc_value_2_pe_3_2_we;
  logic [7:0] acc_value_3_pe_0_3_qs;
  logic [7:0] acc_value_3_pe_0_3_wd;
  logic acc_value_3_pe_0_3_we;
  logic [7:0] acc_value_3_pe_1_3_qs;
  logic [7:0] acc_value_3_pe_1_3_wd;
  logic acc_value_3_pe_1_3_we;
  logic [7:0] acc_value_3_pe_2_3_qs;
  logic [7:0] acc_value_3_pe_2_3_wd;
  logic acc_value_3_pe_2_3_we;
  logic [7:0] acc_value_3_pe_3_3_qs;
  logic [7:0] acc_value_3_pe_3_3_wd;
  logic acc_value_3_pe_3_3_we;

  // Register instances

  // Subregister 0 of Multireg cfg_pe_00
  // R[cfg_pe_00]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_00 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_00_we),
      .wd(cfg_pe_00_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_00[0].q),

      // to register interface (read)
      .qs(cfg_pe_00_qs)
  );



  // Subregister 0 of Multireg cfg_pe_01
  // R[cfg_pe_01]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_01 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_01_we),
      .wd(cfg_pe_01_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_01[0].q),

      // to register interface (read)
      .qs(cfg_pe_01_qs)
  );



  // Subregister 0 of Multireg cfg_pe_02
  // R[cfg_pe_02]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_02 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_02_we),
      .wd(cfg_pe_02_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_02[0].q),

      // to register interface (read)
      .qs(cfg_pe_02_qs)
  );



  // Subregister 0 of Multireg cfg_pe_03
  // R[cfg_pe_03]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_03 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_03_we),
      .wd(cfg_pe_03_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_03[0].q),

      // to register interface (read)
      .qs(cfg_pe_03_qs)
  );



  // Subregister 0 of Multireg cfg_pe_10
  // R[cfg_pe_10]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_10_we),
      .wd(cfg_pe_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_10[0].q),

      // to register interface (read)
      .qs(cfg_pe_10_qs)
  );



  // Subregister 0 of Multireg cfg_pe_11
  // R[cfg_pe_11]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_11_we),
      .wd(cfg_pe_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_11[0].q),

      // to register interface (read)
      .qs(cfg_pe_11_qs)
  );



  // Subregister 0 of Multireg cfg_pe_12
  // R[cfg_pe_12]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_12_we),
      .wd(cfg_pe_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_12[0].q),

      // to register interface (read)
      .qs(cfg_pe_12_qs)
  );



  // Subregister 0 of Multireg cfg_pe_13
  // R[cfg_pe_13]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_13_we),
      .wd(cfg_pe_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_13[0].q),

      // to register interface (read)
      .qs(cfg_pe_13_qs)
  );



  // Subregister 0 of Multireg cfg_pe_20
  // R[cfg_pe_20]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_20 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_20_we),
      .wd(cfg_pe_20_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_20[0].q),

      // to register interface (read)
      .qs(cfg_pe_20_qs)
  );



  // Subregister 0 of Multireg cfg_pe_21
  // R[cfg_pe_21]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_21 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_21_we),
      .wd(cfg_pe_21_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_21[0].q),

      // to register interface (read)
      .qs(cfg_pe_21_qs)
  );



  // Subregister 0 of Multireg cfg_pe_22
  // R[cfg_pe_22]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_22 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_22_we),
      .wd(cfg_pe_22_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_22[0].q),

      // to register interface (read)
      .qs(cfg_pe_22_qs)
  );



  // Subregister 0 of Multireg cfg_pe_23
  // R[cfg_pe_23]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_23 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_23_we),
      .wd(cfg_pe_23_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_23[0].q),

      // to register interface (read)
      .qs(cfg_pe_23_qs)
  );



  // Subregister 0 of Multireg cfg_pe_30
  // R[cfg_pe_30]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_30 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_30_we),
      .wd(cfg_pe_30_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_30[0].q),

      // to register interface (read)
      .qs(cfg_pe_30_qs)
  );



  // Subregister 0 of Multireg cfg_pe_31
  // R[cfg_pe_31]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_31 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_31_we),
      .wd(cfg_pe_31_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_31[0].q),

      // to register interface (read)
      .qs(cfg_pe_31_qs)
  );



  // Subregister 0 of Multireg cfg_pe_32
  // R[cfg_pe_32]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_32 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_32_we),
      .wd(cfg_pe_32_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_32[0].q),

      // to register interface (read)
      .qs(cfg_pe_32_qs)
  );



  // Subregister 0 of Multireg cfg_pe_33
  // R[cfg_pe_33]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_33 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_33_we),
      .wd(cfg_pe_33_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_33[0].q),

      // to register interface (read)
      .qs(cfg_pe_33_qs)
  );



  // Subregister 0 of Multireg pea_constants
  // R[pea_constants_0]: V(False)

  // F[c0_0]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_0_c0_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_0_c0_0_we),
      .wd(pea_constants_0_c0_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[0].c0.q),

      // to register interface (read)
      .qs(pea_constants_0_c0_0_qs)
  );


  // F[c1_0]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_0_c1_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_0_c1_0_we),
      .wd(pea_constants_0_c1_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[0].c1.q),

      // to register interface (read)
      .qs(pea_constants_0_c1_0_qs)
  );


  // F[c2_0]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_0_c2_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_0_c2_0_we),
      .wd(pea_constants_0_c2_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[0].c2.q),

      // to register interface (read)
      .qs(pea_constants_0_c2_0_qs)
  );


  // F[c3_0]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_0_c3_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_0_c3_0_we),
      .wd(pea_constants_0_c3_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[0].c3.q),

      // to register interface (read)
      .qs(pea_constants_0_c3_0_qs)
  );


  // Subregister 1 of Multireg pea_constants
  // R[pea_constants_1]: V(False)

  // F[c0_1]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_1_c0_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_1_c0_1_we),
      .wd(pea_constants_1_c0_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[1].c0.q),

      // to register interface (read)
      .qs(pea_constants_1_c0_1_qs)
  );


  // F[c1_1]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_1_c1_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_1_c1_1_we),
      .wd(pea_constants_1_c1_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[1].c1.q),

      // to register interface (read)
      .qs(pea_constants_1_c1_1_qs)
  );


  // F[c2_1]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_1_c2_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_1_c2_1_we),
      .wd(pea_constants_1_c2_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[1].c2.q),

      // to register interface (read)
      .qs(pea_constants_1_c2_1_qs)
  );


  // F[c3_1]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_1_c3_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_1_c3_1_we),
      .wd(pea_constants_1_c3_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[1].c3.q),

      // to register interface (read)
      .qs(pea_constants_1_c3_1_qs)
  );


  // Subregister 2 of Multireg pea_constants
  // R[pea_constants_2]: V(False)

  // F[c0_2]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_2_c0_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_2_c0_2_we),
      .wd(pea_constants_2_c0_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[2].c0.q),

      // to register interface (read)
      .qs(pea_constants_2_c0_2_qs)
  );


  // F[c1_2]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_2_c1_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_2_c1_2_we),
      .wd(pea_constants_2_c1_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[2].c1.q),

      // to register interface (read)
      .qs(pea_constants_2_c1_2_qs)
  );


  // F[c2_2]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_2_c2_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_2_c2_2_we),
      .wd(pea_constants_2_c2_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[2].c2.q),

      // to register interface (read)
      .qs(pea_constants_2_c2_2_qs)
  );


  // F[c3_2]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_2_c3_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_2_c3_2_we),
      .wd(pea_constants_2_c3_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[2].c3.q),

      // to register interface (read)
      .qs(pea_constants_2_c3_2_qs)
  );


  // Subregister 3 of Multireg pea_constants
  // R[pea_constants_3]: V(False)

  // F[c0_3]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_3_c0_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_3_c0_3_we),
      .wd(pea_constants_3_c0_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[3].c0.q),

      // to register interface (read)
      .qs(pea_constants_3_c0_3_qs)
  );


  // F[c1_3]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_3_c1_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_3_c1_3_we),
      .wd(pea_constants_3_c1_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[3].c1.q),

      // to register interface (read)
      .qs(pea_constants_3_c1_3_qs)
  );


  // F[c2_3]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_3_c2_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_3_c2_3_we),
      .wd(pea_constants_3_c2_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[3].c2.q),

      // to register interface (read)
      .qs(pea_constants_3_c2_3_qs)
  );


  // F[c3_3]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pea_constants_3_c3_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_3_c3_3_we),
      .wd(pea_constants_3_c3_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[3].c3.q),

      // to register interface (read)
      .qs(pea_constants_3_c3_3_qs)
  );



  // R[stream_dma_cfg]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_stream_dma_cfg (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(stream_dma_cfg_we),
      .wd(stream_dma_cfg_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.stream_dma_cfg.q),

      // to register interface (read)
      .qs(stream_dma_cfg_qs)
  );



  // Subregister 0 of Multireg sel_out_col_pea
  // R[sel_out_col_pea]: V(False)

  // F[sel_col_0_0]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_sel_out_col_pea_sel_col_0_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_0_0_we),
      .wd(sel_out_col_pea_sel_col_0_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_0.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_0_0_qs)
  );


  // F[sel_col_1_0]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_sel_out_col_pea_sel_col_1_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_1_0_we),
      .wd(sel_out_col_pea_sel_col_1_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_1.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_1_0_qs)
  );


  // F[sel_col_2_0]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_sel_out_col_pea_sel_col_2_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_2_0_we),
      .wd(sel_out_col_pea_sel_col_2_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_2.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_2_0_qs)
  );


  // F[sel_col_3_0]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_sel_out_col_pea_sel_col_3_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_3_0_we),
      .wd(sel_out_col_pea_sel_col_3_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_3.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_3_0_qs)
  );




  // Subregister 0 of Multireg acc_value
  // R[acc_value_0]: V(False)

  // F[pe_0_0]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_0_pe_0_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_0_pe_0_0_we),
      .wd(acc_value_0_pe_0_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[0].pe_0.q),

      // to register interface (read)
      .qs(acc_value_0_pe_0_0_qs)
  );


  // F[pe_1_0]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_0_pe_1_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_0_pe_1_0_we),
      .wd(acc_value_0_pe_1_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[0].pe_1.q),

      // to register interface (read)
      .qs(acc_value_0_pe_1_0_qs)
  );


  // F[pe_2_0]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_0_pe_2_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_0_pe_2_0_we),
      .wd(acc_value_0_pe_2_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[0].pe_2.q),

      // to register interface (read)
      .qs(acc_value_0_pe_2_0_qs)
  );


  // F[pe_3_0]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_0_pe_3_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_0_pe_3_0_we),
      .wd(acc_value_0_pe_3_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[0].pe_3.q),

      // to register interface (read)
      .qs(acc_value_0_pe_3_0_qs)
  );


  // Subregister 1 of Multireg acc_value
  // R[acc_value_1]: V(False)

  // F[pe_0_1]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_1_pe_0_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_1_pe_0_1_we),
      .wd(acc_value_1_pe_0_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[1].pe_0.q),

      // to register interface (read)
      .qs(acc_value_1_pe_0_1_qs)
  );


  // F[pe_1_1]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_1_pe_1_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_1_pe_1_1_we),
      .wd(acc_value_1_pe_1_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[1].pe_1.q),

      // to register interface (read)
      .qs(acc_value_1_pe_1_1_qs)
  );


  // F[pe_2_1]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_1_pe_2_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_1_pe_2_1_we),
      .wd(acc_value_1_pe_2_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[1].pe_2.q),

      // to register interface (read)
      .qs(acc_value_1_pe_2_1_qs)
  );


  // F[pe_3_1]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_1_pe_3_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_1_pe_3_1_we),
      .wd(acc_value_1_pe_3_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[1].pe_3.q),

      // to register interface (read)
      .qs(acc_value_1_pe_3_1_qs)
  );


  // Subregister 2 of Multireg acc_value
  // R[acc_value_2]: V(False)

  // F[pe_0_2]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_2_pe_0_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_2_pe_0_2_we),
      .wd(acc_value_2_pe_0_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[2].pe_0.q),

      // to register interface (read)
      .qs(acc_value_2_pe_0_2_qs)
  );


  // F[pe_1_2]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_2_pe_1_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_2_pe_1_2_we),
      .wd(acc_value_2_pe_1_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[2].pe_1.q),

      // to register interface (read)
      .qs(acc_value_2_pe_1_2_qs)
  );


  // F[pe_2_2]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_2_pe_2_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_2_pe_2_2_we),
      .wd(acc_value_2_pe_2_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[2].pe_2.q),

      // to register interface (read)
      .qs(acc_value_2_pe_2_2_qs)
  );


  // F[pe_3_2]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_2_pe_3_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_2_pe_3_2_we),
      .wd(acc_value_2_pe_3_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[2].pe_3.q),

      // to register interface (read)
      .qs(acc_value_2_pe_3_2_qs)
  );


  // Subregister 3 of Multireg acc_value
  // R[acc_value_3]: V(False)

  // F[pe_0_3]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_3_pe_0_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_3_pe_0_3_we),
      .wd(acc_value_3_pe_0_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[3].pe_0.q),

      // to register interface (read)
      .qs(acc_value_3_pe_0_3_qs)
  );


  // F[pe_1_3]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_3_pe_1_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_3_pe_1_3_we),
      .wd(acc_value_3_pe_1_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[3].pe_1.q),

      // to register interface (read)
      .qs(acc_value_3_pe_1_3_qs)
  );


  // F[pe_2_3]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_3_pe_2_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_3_pe_2_3_we),
      .wd(acc_value_3_pe_2_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[3].pe_2.q),

      // to register interface (read)
      .qs(acc_value_3_pe_2_3_qs)
  );


  // F[pe_3_3]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_acc_value_3_pe_3_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_3_pe_3_3_we),
      .wd(acc_value_3_pe_3_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[3].pe_3.q),

      // to register interface (read)
      .qs(acc_value_3_pe_3_3_qs)
  );





  logic [25:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == MAGE_CFG_PE_00_OFFSET);
    addr_hit[1] = (reg_addr == MAGE_CFG_PE_01_OFFSET);
    addr_hit[2] = (reg_addr == MAGE_CFG_PE_02_OFFSET);
    addr_hit[3] = (reg_addr == MAGE_CFG_PE_03_OFFSET);
    addr_hit[4] = (reg_addr == MAGE_CFG_PE_10_OFFSET);
    addr_hit[5] = (reg_addr == MAGE_CFG_PE_11_OFFSET);
    addr_hit[6] = (reg_addr == MAGE_CFG_PE_12_OFFSET);
    addr_hit[7] = (reg_addr == MAGE_CFG_PE_13_OFFSET);
    addr_hit[8] = (reg_addr == MAGE_CFG_PE_20_OFFSET);
    addr_hit[9] = (reg_addr == MAGE_CFG_PE_21_OFFSET);
    addr_hit[10] = (reg_addr == MAGE_CFG_PE_22_OFFSET);
    addr_hit[11] = (reg_addr == MAGE_CFG_PE_23_OFFSET);
    addr_hit[12] = (reg_addr == MAGE_CFG_PE_30_OFFSET);
    addr_hit[13] = (reg_addr == MAGE_CFG_PE_31_OFFSET);
    addr_hit[14] = (reg_addr == MAGE_CFG_PE_32_OFFSET);
    addr_hit[15] = (reg_addr == MAGE_CFG_PE_33_OFFSET);
    addr_hit[16] = (reg_addr == MAGE_PEA_CONSTANTS_0_OFFSET);
    addr_hit[17] = (reg_addr == MAGE_PEA_CONSTANTS_1_OFFSET);
    addr_hit[18] = (reg_addr == MAGE_PEA_CONSTANTS_2_OFFSET);
    addr_hit[19] = (reg_addr == MAGE_PEA_CONSTANTS_3_OFFSET);
    addr_hit[20] = (reg_addr == MAGE_STREAM_DMA_CFG_OFFSET);
    addr_hit[21] = (reg_addr == MAGE_SEL_OUT_COL_PEA_OFFSET);
    addr_hit[22] = (reg_addr == MAGE_ACC_VALUE_0_OFFSET);
    addr_hit[23] = (reg_addr == MAGE_ACC_VALUE_1_OFFSET);
    addr_hit[24] = (reg_addr == MAGE_ACC_VALUE_2_OFFSET);
    addr_hit[25] = (reg_addr == MAGE_ACC_VALUE_3_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(MAGE_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(MAGE_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(MAGE_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(MAGE_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(MAGE_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(MAGE_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(MAGE_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(MAGE_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(MAGE_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(MAGE_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(MAGE_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(MAGE_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(MAGE_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(MAGE_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(MAGE_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(MAGE_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(MAGE_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(MAGE_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(MAGE_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(MAGE_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(MAGE_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(MAGE_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(MAGE_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(MAGE_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(MAGE_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(MAGE_PERMIT[25] & ~reg_be)))));
  end

  assign cfg_pe_00_we = addr_hit[0] & reg_we & !reg_error;
  assign cfg_pe_00_wd = reg_wdata[31:0];

  assign cfg_pe_01_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg_pe_01_wd = reg_wdata[31:0];

  assign cfg_pe_02_we = addr_hit[2] & reg_we & !reg_error;
  assign cfg_pe_02_wd = reg_wdata[31:0];

  assign cfg_pe_03_we = addr_hit[3] & reg_we & !reg_error;
  assign cfg_pe_03_wd = reg_wdata[31:0];

  assign cfg_pe_10_we = addr_hit[4] & reg_we & !reg_error;
  assign cfg_pe_10_wd = reg_wdata[31:0];

  assign cfg_pe_11_we = addr_hit[5] & reg_we & !reg_error;
  assign cfg_pe_11_wd = reg_wdata[31:0];

  assign cfg_pe_12_we = addr_hit[6] & reg_we & !reg_error;
  assign cfg_pe_12_wd = reg_wdata[31:0];

  assign cfg_pe_13_we = addr_hit[7] & reg_we & !reg_error;
  assign cfg_pe_13_wd = reg_wdata[31:0];

  assign cfg_pe_20_we = addr_hit[8] & reg_we & !reg_error;
  assign cfg_pe_20_wd = reg_wdata[31:0];

  assign cfg_pe_21_we = addr_hit[9] & reg_we & !reg_error;
  assign cfg_pe_21_wd = reg_wdata[31:0];

  assign cfg_pe_22_we = addr_hit[10] & reg_we & !reg_error;
  assign cfg_pe_22_wd = reg_wdata[31:0];

  assign cfg_pe_23_we = addr_hit[11] & reg_we & !reg_error;
  assign cfg_pe_23_wd = reg_wdata[31:0];

  assign cfg_pe_30_we = addr_hit[12] & reg_we & !reg_error;
  assign cfg_pe_30_wd = reg_wdata[31:0];

  assign cfg_pe_31_we = addr_hit[13] & reg_we & !reg_error;
  assign cfg_pe_31_wd = reg_wdata[31:0];

  assign cfg_pe_32_we = addr_hit[14] & reg_we & !reg_error;
  assign cfg_pe_32_wd = reg_wdata[31:0];

  assign cfg_pe_33_we = addr_hit[15] & reg_we & !reg_error;
  assign cfg_pe_33_wd = reg_wdata[31:0];

  assign pea_constants_0_c0_0_we = addr_hit[16] & reg_we & !reg_error;
  assign pea_constants_0_c0_0_wd = reg_wdata[7:0];

  assign pea_constants_0_c1_0_we = addr_hit[16] & reg_we & !reg_error;
  assign pea_constants_0_c1_0_wd = reg_wdata[15:8];

  assign pea_constants_0_c2_0_we = addr_hit[16] & reg_we & !reg_error;
  assign pea_constants_0_c2_0_wd = reg_wdata[23:16];

  assign pea_constants_0_c3_0_we = addr_hit[16] & reg_we & !reg_error;
  assign pea_constants_0_c3_0_wd = reg_wdata[31:24];

  assign pea_constants_1_c0_1_we = addr_hit[17] & reg_we & !reg_error;
  assign pea_constants_1_c0_1_wd = reg_wdata[7:0];

  assign pea_constants_1_c1_1_we = addr_hit[17] & reg_we & !reg_error;
  assign pea_constants_1_c1_1_wd = reg_wdata[15:8];

  assign pea_constants_1_c2_1_we = addr_hit[17] & reg_we & !reg_error;
  assign pea_constants_1_c2_1_wd = reg_wdata[23:16];

  assign pea_constants_1_c3_1_we = addr_hit[17] & reg_we & !reg_error;
  assign pea_constants_1_c3_1_wd = reg_wdata[31:24];

  assign pea_constants_2_c0_2_we = addr_hit[18] & reg_we & !reg_error;
  assign pea_constants_2_c0_2_wd = reg_wdata[7:0];

  assign pea_constants_2_c1_2_we = addr_hit[18] & reg_we & !reg_error;
  assign pea_constants_2_c1_2_wd = reg_wdata[15:8];

  assign pea_constants_2_c2_2_we = addr_hit[18] & reg_we & !reg_error;
  assign pea_constants_2_c2_2_wd = reg_wdata[23:16];

  assign pea_constants_2_c3_2_we = addr_hit[18] & reg_we & !reg_error;
  assign pea_constants_2_c3_2_wd = reg_wdata[31:24];

  assign pea_constants_3_c0_3_we = addr_hit[19] & reg_we & !reg_error;
  assign pea_constants_3_c0_3_wd = reg_wdata[7:0];

  assign pea_constants_3_c1_3_we = addr_hit[19] & reg_we & !reg_error;
  assign pea_constants_3_c1_3_wd = reg_wdata[15:8];

  assign pea_constants_3_c2_3_we = addr_hit[19] & reg_we & !reg_error;
  assign pea_constants_3_c2_3_wd = reg_wdata[23:16];

  assign pea_constants_3_c3_3_we = addr_hit[19] & reg_we & !reg_error;
  assign pea_constants_3_c3_3_wd = reg_wdata[31:24];

  assign stream_dma_cfg_we = addr_hit[20] & reg_we & !reg_error;
  assign stream_dma_cfg_wd = reg_wdata[3:0];

  assign sel_out_col_pea_sel_col_0_0_we = addr_hit[21] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_0_0_wd = reg_wdata[7:0];

  assign sel_out_col_pea_sel_col_1_0_we = addr_hit[21] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_1_0_wd = reg_wdata[15:8];

  assign sel_out_col_pea_sel_col_2_0_we = addr_hit[21] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_2_0_wd = reg_wdata[23:16];

  assign sel_out_col_pea_sel_col_3_0_we = addr_hit[21] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_3_0_wd = reg_wdata[31:24];

  assign acc_value_0_pe_0_0_we = addr_hit[22] & reg_we & !reg_error;
  assign acc_value_0_pe_0_0_wd = reg_wdata[7:0];

  assign acc_value_0_pe_1_0_we = addr_hit[22] & reg_we & !reg_error;
  assign acc_value_0_pe_1_0_wd = reg_wdata[15:8];

  assign acc_value_0_pe_2_0_we = addr_hit[22] & reg_we & !reg_error;
  assign acc_value_0_pe_2_0_wd = reg_wdata[23:16];

  assign acc_value_0_pe_3_0_we = addr_hit[22] & reg_we & !reg_error;
  assign acc_value_0_pe_3_0_wd = reg_wdata[31:24];

  assign acc_value_1_pe_0_1_we = addr_hit[23] & reg_we & !reg_error;
  assign acc_value_1_pe_0_1_wd = reg_wdata[7:0];

  assign acc_value_1_pe_1_1_we = addr_hit[23] & reg_we & !reg_error;
  assign acc_value_1_pe_1_1_wd = reg_wdata[15:8];

  assign acc_value_1_pe_2_1_we = addr_hit[23] & reg_we & !reg_error;
  assign acc_value_1_pe_2_1_wd = reg_wdata[23:16];

  assign acc_value_1_pe_3_1_we = addr_hit[23] & reg_we & !reg_error;
  assign acc_value_1_pe_3_1_wd = reg_wdata[31:24];

  assign acc_value_2_pe_0_2_we = addr_hit[24] & reg_we & !reg_error;
  assign acc_value_2_pe_0_2_wd = reg_wdata[7:0];

  assign acc_value_2_pe_1_2_we = addr_hit[24] & reg_we & !reg_error;
  assign acc_value_2_pe_1_2_wd = reg_wdata[15:8];

  assign acc_value_2_pe_2_2_we = addr_hit[24] & reg_we & !reg_error;
  assign acc_value_2_pe_2_2_wd = reg_wdata[23:16];

  assign acc_value_2_pe_3_2_we = addr_hit[24] & reg_we & !reg_error;
  assign acc_value_2_pe_3_2_wd = reg_wdata[31:24];

  assign acc_value_3_pe_0_3_we = addr_hit[25] & reg_we & !reg_error;
  assign acc_value_3_pe_0_3_wd = reg_wdata[7:0];

  assign acc_value_3_pe_1_3_we = addr_hit[25] & reg_we & !reg_error;
  assign acc_value_3_pe_1_3_wd = reg_wdata[15:8];

  assign acc_value_3_pe_2_3_we = addr_hit[25] & reg_we & !reg_error;
  assign acc_value_3_pe_2_3_wd = reg_wdata[23:16];

  assign acc_value_3_pe_3_3_we = addr_hit[25] & reg_we & !reg_error;
  assign acc_value_3_pe_3_3_wd = reg_wdata[31:24];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = cfg_pe_00_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = cfg_pe_01_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = cfg_pe_02_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = cfg_pe_03_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = cfg_pe_10_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = cfg_pe_11_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = cfg_pe_12_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = cfg_pe_13_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = cfg_pe_20_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = cfg_pe_21_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = cfg_pe_22_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = cfg_pe_23_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = cfg_pe_30_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = cfg_pe_31_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = cfg_pe_32_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = cfg_pe_33_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[7:0]   = pea_constants_0_c0_0_qs;
        reg_rdata_next[15:8]  = pea_constants_0_c1_0_qs;
        reg_rdata_next[23:16] = pea_constants_0_c2_0_qs;
        reg_rdata_next[31:24] = pea_constants_0_c3_0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[7:0]   = pea_constants_1_c0_1_qs;
        reg_rdata_next[15:8]  = pea_constants_1_c1_1_qs;
        reg_rdata_next[23:16] = pea_constants_1_c2_1_qs;
        reg_rdata_next[31:24] = pea_constants_1_c3_1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[7:0]   = pea_constants_2_c0_2_qs;
        reg_rdata_next[15:8]  = pea_constants_2_c1_2_qs;
        reg_rdata_next[23:16] = pea_constants_2_c2_2_qs;
        reg_rdata_next[31:24] = pea_constants_2_c3_2_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[7:0]   = pea_constants_3_c0_3_qs;
        reg_rdata_next[15:8]  = pea_constants_3_c1_3_qs;
        reg_rdata_next[23:16] = pea_constants_3_c2_3_qs;
        reg_rdata_next[31:24] = pea_constants_3_c3_3_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[3:0] = stream_dma_cfg_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[7:0]   = sel_out_col_pea_sel_col_0_0_qs;
        reg_rdata_next[15:8]  = sel_out_col_pea_sel_col_1_0_qs;
        reg_rdata_next[23:16] = sel_out_col_pea_sel_col_2_0_qs;
        reg_rdata_next[31:24] = sel_out_col_pea_sel_col_3_0_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[7:0]   = acc_value_0_pe_0_0_qs;
        reg_rdata_next[15:8]  = acc_value_0_pe_1_0_qs;
        reg_rdata_next[23:16] = acc_value_0_pe_2_0_qs;
        reg_rdata_next[31:24] = acc_value_0_pe_3_0_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[7:0]   = acc_value_1_pe_0_1_qs;
        reg_rdata_next[15:8]  = acc_value_1_pe_1_1_qs;
        reg_rdata_next[23:16] = acc_value_1_pe_2_1_qs;
        reg_rdata_next[31:24] = acc_value_1_pe_3_1_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[7:0]   = acc_value_2_pe_0_2_qs;
        reg_rdata_next[15:8]  = acc_value_2_pe_1_2_qs;
        reg_rdata_next[23:16] = acc_value_2_pe_2_2_qs;
        reg_rdata_next[31:24] = acc_value_2_pe_3_2_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[7:0]   = acc_value_3_pe_0_3_qs;
        reg_rdata_next[15:8]  = acc_value_3_pe_1_3_qs;
        reg_rdata_next[23:16] = acc_value_3_pe_2_3_qs;
        reg_rdata_next[31:24] = acc_value_3_pe_3_3_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module mage_reg_top_intf #(
    parameter  int AW = 7,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output mage_reg_pkg::mage_reg2hw_t reg2hw,  // Write
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  mage_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .devmode_i
  );

endmodule


